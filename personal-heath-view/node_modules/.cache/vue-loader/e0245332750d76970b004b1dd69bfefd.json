{"remainingRequest":"D:\\JavaE\\personal-heath-view\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\JavaE\\personal-heath-view\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\JavaE\\personal-heath-view\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\JavaE\\personal-heath-view\\src\\views\\admin\\MessageManage.vue?vue&type=template&id=1626d57c&scoped=true&","dependencies":[{"path":"D:\\JavaE\\personal-heath-view\\src\\views\\admin\\MessageManage.vue","mtime":1720883646000},{"path":"D:\\JavaE\\personal-heath-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JavaE\\personal-heath-view\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\JavaE\\personal-heath-view\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\JavaE\\personal-heath-view\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}